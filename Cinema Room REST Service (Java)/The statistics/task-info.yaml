type: edu
files:
- name: src/cinema/Main.java
  visible: true
  text: |
    package cinema;

    import org.springframework.boot.SpringApplication;
    import org.springframework.boot.autoconfigure.SpringBootApplication;

    @SpringBootApplication
    public class Main {
        public static void main(String[] args) {
            SpringApplication.run(Main.class, args);
        }
    }
  learner_created: false
- name: src/resources/application.properties
  visible: true
  text: |-
    server.port=28852
    management.endpoints.web.exposure.include=*
    management.endpoint.shutdown.enabled=true
  learner_created: false
- name: build.gradle
  visible: true
  text: |-
    buildscript {
        repositories {
            mavenCentral()
        }
        dependencies {
            classpath "org.springframework.boot:spring-boot-gradle-plugin:$hs.spring.bootVersion"
            classpath "io.spring.gradle:dependency-management-plugin:$hs.spring.dependencyManagementVersion"
        }
    }

    apply plugin: 'java'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'

    repositories {
        mavenCentral()
    }

    sourceSets.main.resources.srcDirs = ["src/resources"]

    dependencies {
        implementation 'org.springframework.boot:spring-boot-starter'
        implementation 'org.springframework.boot:spring-boot-starter-actuator'
        implementation 'org.springframework.boot:spring-boot-starter-web'
    }
  learner_created: false
- name: test/CinemaTests.java
  visible: false
  text: |-
    import cinema.Main;
    import com.google.gson.Gson;
    import com.google.gson.JsonObject;
    import org.hyperskill.hstest.dynamic.DynamicTest;
    import org.hyperskill.hstest.dynamic.input.DynamicTesting;
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.mocks.web.response.HttpResponse;
    import org.hyperskill.hstest.stage.SpringTest;
    import org.hyperskill.hstest.testcase.CheckResult;

    import java.util.Map;
    import java.util.UUID;

    import static org.hyperskill.hstest.testing.expect.Expectation.expect;
    import static org.hyperskill.hstest.testing.expect.json.JsonChecker.*;

    public class CinemaTests extends SpringTest {

        private static final String ALREADY_PURCHASED_ERROR_MESSAGE = "The ticket has been already purchased!";
        private static final String OUT_OF_BOUNDS_ERROR_MESSAGE = "The number of a row or a column is out of bounds!";
        private static final String WRONG_TOKEN_ERROR_MESSAGE = "Wrong token!";
        private static final String WRONG_PASSWORD_MESSAGE = "The password is wrong!";

        private static final Gson gson = new Gson();

        private static String token = "";

        public CinemaTests() {
            super(Main.class);
        }

        private static void checkStatusCode(HttpResponse resp, int status) {
            if (resp.getStatusCode() != status) {
                throw new WrongAnswer(
                    resp.getRequest().getMethod() + " " +
                        resp.getRequest().getLocalUri() +
                        " should respond with status code " + status + ", " +
                        "responded: " + resp.getStatusCode() + "\n\n" +
                        "Response body:\n\n" + resp.getContent()
                );
            }
        }

        CheckResult testEndpoint() {
            HttpResponse response = get("/seats").send();
            checkStatusCode(response, 200);
            return CheckResult.correct();
        }

        CheckResult testEndpointAvailableSeats() {
            HttpResponse response = get("/seats").send();
            expect(response.getContent()).asJson().check(
                isObject()
                    .value("available_seats",
                        isArray(
                            81,
                            isObject()
                                .value("row", isInteger(i -> i >= 1 && i <= 9))
                                .value("column", isInteger(i -> i >= 1 && i <= 9))
                                .value("price", isInteger(price -> price == 10 || price == 8))
                        )
                    )
                    .value("total_columns", 9)
                    .value("total_rows", 9)
            );
            return CheckResult.correct();
        }

        CheckResult testPurchaseTicket() {
            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "1",
                    "column", "1"
                ))
            ).send();

            checkStatusCode(response, 200);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("token", isString())
                        .value("ticket",
                            isObject()
                                .value("row", 1)
                                .value("column", 1)
                                .value("price", 10)
                        )
                );

            JsonObject object = gson.fromJson(response.getContent(), JsonObject.class);
            token = object.get("token").getAsString();

            return CheckResult.correct();
        }

        CheckResult testErrorMessageThatTicketHasBeenPurchased() {
            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "1",
                    "column", "1"
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("error", ALREADY_PURCHASED_ERROR_MESSAGE)
                        .anyOtherValues()
                );
            return CheckResult.correct();
        }

        CheckResult testErrorMessageThatNumbersOutOfBounds() {
            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "10",
                    "column", "1"
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("error", OUT_OF_BOUNDS_ERROR_MESSAGE)
                        .anyOtherValues()
                );

            response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "1",
                    "column", "10"
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("error", OUT_OF_BOUNDS_ERROR_MESSAGE)
                        .anyOtherValues()
                );

            response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "-1",
                    "column", "-1"
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("error", OUT_OF_BOUNDS_ERROR_MESSAGE)
                        .anyOtherValues()
                );


            return CheckResult.correct();
        }

        CheckResult testReturnTicket() {

            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", 2,
                    "column", 5
                ))
            ).send();

            checkStatusCode(response, 200);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("token", isString())
                        .value("ticket",
                            isObject()
                                .value("row", 2)
                                .value("column", 5)
                                .value("price", 10)
                        )
                );

            JsonObject jsonResponse = gson.fromJson(response.getContent(), JsonObject.class);

            String tokenFromResponse = jsonResponse.get("token").getAsString();
            String wrongToken = UUID.randomUUID().toString();

            response = post(
                "/return",
                gson.toJson(Map.of(
                    "token", wrongToken
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson().check(
                isObject()
                    .value("error", WRONG_TOKEN_ERROR_MESSAGE)
                    .anyOtherValues()
            );

            response = post(
                "/return",
                gson.toJson(Map.of(
                    "token", tokenFromResponse
                ))
            ).send();

            checkStatusCode(response, 200);

            expect(response.getContent()).asJson().check(
                isObject()
                    .value("returned_ticket",
                        isObject()
                            .value("row", 2)
                            .value("column", 5)
                            .value("price", 10)
                    )
            );

            return CheckResult.correct();
        }

        CheckResult testStatsEndpoint() {

            HttpResponse response = post("/stats", "").send();
            checkStatusCode(response, 401);

            expect(response.getContent()).asJson().check(
                isObject()
                    .value("error", WRONG_PASSWORD_MESSAGE)
                    .anyOtherValues()
            );


            return CheckResult.correct();
        }

        CheckResult testStats(int numberOfPurchasedTickets, int currentIncome, int availableSeats) {
            Map<String, String> requestParams = Map.of("password", "super_secret");
            HttpResponse response = post("/stats", requestParams).send();
            checkStatusCode(response, 200);

            expect(response.getContent()).asJson().check(
                isObject()
                    .value("number_of_purchased_tickets", numberOfPurchasedTickets)
                    .value("current_income", currentIncome)
                    .value("number_of_available_seats", availableSeats)
            );

            return CheckResult.correct();
        }

        CheckResult returnTicket() {
            HttpResponse response = post(
                "/return",
                gson.toJson(Map.of(
                    "token", token
                ))
            ).send();

            expect(response.getContent()).asJson().check(
                isObject()
                    .value("returned_ticket",
                        isObject()
                            .value("row", 7)
                            .value("column", 4)
                            .value("price", 8)
                    )
            );

            return CheckResult.correct();
        }

        CheckResult testPurchaseAnotherTicket() {
            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "7",
                    "column", "4"
                ))
            ).send();

            checkStatusCode(response, 200);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("token", isString())
                        .value("ticket",
                            isObject()
                                .value("row", 7)
                                .value("column", 4)
                                .value("price", 8)
                        )
                );

            JsonObject object = gson.fromJson(response.getContent(), JsonObject.class);
            token = object.get("token").getAsString();

            return CheckResult.correct();
        }

        @DynamicTest
        DynamicTesting[] dynamicTests = new DynamicTesting[]{
            this::testEndpoint,
            this::testEndpointAvailableSeats,
            this::testPurchaseTicket,
            this::testErrorMessageThatTicketHasBeenPurchased,
            this::testErrorMessageThatNumbersOutOfBounds,
            this::testReturnTicket,
            this::testStatsEndpoint,
            () -> testStats(1, 10, 80),
            this::testPurchaseAnotherTicket,
            () -> testStats(2, 18, 79),
            this::returnTicket,
            () -> testStats(1, 10, 80),
        };
    }
  learner_created: false
- name: src/cinema/model/Seat.java
  visible: true
  text: |-
    package cinema.model;

    public record Seat(
            int row,
            int column
    ) { }
  learner_created: true
- name: src/cinema/model/response/ReturnedTicket.java
  visible: true
  text: |
    package cinema.model.response;

    public record ReturnedTicket (
            PricedSeat returnedTicket
    ){
    }
  learner_created: true
- name: src/cinema/repository/SeatRepository.java
  visible: true
  text: |
    package cinema.repository;

    import cinema.model.Seat;
    import org.springframework.stereotype.Repository;

    import java.util.ArrayList;
    import java.util.Collections;
    import java.util.List;

    @Repository
    public class SeatRepository {
        List<Seat> data = new ArrayList<>();

        public void save(Seat seat){
            data.add(seat);
        }

        public List<Seat> getAvailableSeats(){
            return Collections.unmodifiableList(data);
        }

        public void remove(Seat seat){
            data.remove(seat);
        }

        public boolean contains(Seat seat){
            return data.contains(seat);
        }
    }
  learner_created: true
- name: src/cinema/model/response/CinemaResponse.java
  visible: true
  text: |-
    package cinema.model.response;

    import cinema.model.Seat;
    import com.fasterxml.jackson.annotation.JsonProperty;
    import java.util.Collection;

    public record CinemaResponse(
            int totalRows,
            int totalColumns,
            Collection<PricedSeat> availableSeats
    ) {
    }
  learner_created: true
- name: src/cinema/exception/AlreadyPurchasedException.java
  visible: true
  text: |
    package cinema.exception;

    public class AlreadyPurchasedException extends RuntimeException {
        public AlreadyPurchasedException() {
            super("The ticket has been already purchased!");
        }
    }
  learner_created: true
- name: src/cinema/model/request/TokenDTO.java
  visible: true
  text: |
    package cinema.model.request;

    public record TokenDTO(
            String token
    ) {
    }
  learner_created: true
- name: src/cinema/exception/WrongTokenException.java
  visible: true
  text: |-
    package cinema.exception;


    public class WrongTokenException extends RuntimeException {
        public WrongTokenException() {
            super("Wrong token!");
        }
    }
  learner_created: true
- name: src/cinema/exception/OutOfBoundsCoordinatesException.java
  visible: true
  text: |-
    package cinema.exception;

    public class OutOfBoundsCoordinatesException extends RuntimeException {
        public OutOfBoundsCoordinatesException() {
            super("The number of a row or a column is out of bounds!");
        }
    }
  learner_created: true
- name: src/resources/cinema.properties
  visible: true
  text: |-
    cinema.total-rows=9
    cinema.total-columns=9
    cinema.number-of-first-rows=4
    cinema.price-for-bottom-rows=10
    cinema.price-for-top-rows=8
  learner_created: true
- name: src/cinema/mapper/Mapper.java
  visible: true
  text: |-
    package cinema.mapper;

    import cinema.model.Seat;
    import cinema.model.response.PricedSeat;
    import org.springframework.stereotype.Component;

    @Component
    public class Mapper {
        public Seat toSeat(PricedSeat pricedSeat){
            return new Seat(pricedSeat.row(), pricedSeat.column());
        }
    }
  learner_created: true
- name: src/cinema/model/SoldTicket.java
  visible: true
  text: |-
    package cinema.model;

    import cinema.model.response.PricedSeat;
    import lombok.Value;

    @Value
    public class SoldTicket {
        String token;
        PricedSeat ticket;
    }
  learner_created: true
- name: src/cinema/repository/SoldTicketRepository.java
  visible: true
  text: |-
    package cinema.repository;

    import cinema.model.SoldTicket;
    import cinema.model.response.PricedSeat;
    import lombok.extern.slf4j.Slf4j;
    import org.springframework.stereotype.Repository;

    import java.util.HashMap;
    import java.util.Map;
    import java.util.Optional;
    import java.util.UUID;

    @Slf4j
    @Repository
    public class SoldTicketRepository {
        private Map<String, PricedSeat> data = new HashMap<>();

        public SoldTicket save(PricedSeat ticket){
            String token = UUID.randomUUID().toString();
            SoldTicket res = new SoldTicket(
                    token,ticket);
            log.info("token = '{}' ticket = '{}'", token, ticket);
            data.put(token, ticket);
            return res;
        }

        public Optional<PricedSeat> remove(String token) {
            log.info("remove token = '{}'", token);
            var res = data.remove(token);
            log.info("returned ticket = '{}'", res);
            return Optional.ofNullable(res);
        }
    }
  learner_created: true
- name: src/cinema/configuration/CinemaProps.java
  visible: true
  text: |
    package cinema.configuration;

    import jakarta.annotation.PostConstruct;
    import lombok.extern.slf4j.Slf4j;
    import org.springframework.boot.context.properties.ConfigurationProperties;
    import org.springframework.boot.context.properties.EnableConfigurationProperties;
    import org.springframework.context.annotation.Configuration;
    import org.springframework.context.annotation.PropertySource;

    @EnableConfigurationProperties(CinemaProps.class)
    @Configuration
    @PropertySource("classpath:cinema.properties")
    class PropsConfig{}

    @Slf4j
    @ConfigurationProperties("cinema")
    public record CinemaProps(
            int total_rows,
            int total_columns,
            int numberOfFirstRows,
            int priceForBottomRows,
            int priceForTopRows
    ) {

        @PostConstruct
        void logAfterInit(){
            log.info("totalRows = " + total_rows);
            log.info("totalColumn = " + total_columns);
            log.info("nofr = " + numberOfFirstRows);
            log.info("pfbr = " + priceForBottomRows);
            log.info("pftr = " + priceForTopRows);
        }
    }
  learner_created: true
- name: src/cinema/controller/CinemaController.java
  visible: true
  text: |-
    package cinema.controller;
    import cinema.configuration.CinemaProps;
    import cinema.model.Seat;

    import cinema.model.SoldTicket;
    import cinema.model.request.TokenDTO;
    import cinema.model.response.CinemaResponse;
    import cinema.model.response.ReturnedTicket;
    import cinema.service.CinemaService;
    import lombok.AllArgsConstructor;
    import lombok.extern.slf4j.Slf4j;
    import org.springframework.web.bind.annotation.*;

    @Slf4j
    @AllArgsConstructor
    @RestController
    public class CinemaController{
        CinemaService cinemaService;
        CinemaProps cinemaProps;

        @GetMapping("/seats")
        CinemaResponse seats() {
            var seats = cinemaService.getAvailableSeats();

            return new CinemaResponse(cinemaProps.total_rows(), cinemaProps.total_columns(), seats);
        }

        @PostMapping("/purchase")
        SoldTicket purchase(
                @RequestBody Seat seat
        ){
            log.info("Purchase request for seat = {}",
                    seat);
            return cinemaService.purchase(seat);
        }

        @PostMapping("/return")
        ReturnedTicket returnHandler(@RequestBody TokenDTO tokenDTO){
            return new ReturnedTicket(
                    cinemaService.returnTicket(tokenDTO));
        }
    }
  learner_created: true
- name: src/cinema/model/response/PricedSeat.java
  visible: true
  text: |-
    package cinema.model.response;

    import lombok.Builder;

    @Builder
    public record PricedSeat(
            int row,
            int column,
            int price
    ) {
    }
  learner_created: true
- name: src/cinema/service/CinemaService.java
  visible: true
  text: |-
    package cinema.service;

    import cinema.configuration.CinemaProps;
    import cinema.exception.AlreadyPurchasedException;
    import cinema.exception.OutOfBoundsCoordinatesException;
    import cinema.exception.WrongTokenException;
    import cinema.mapper.Mapper;
    import cinema.model.Seat;
    import cinema.model.SoldTicket;
    import cinema.model.request.TokenDTO;
    import cinema.model.response.PricedSeat;
    import cinema.repository.SeatRepository;
    import cinema.repository.SoldTicketRepository;
    import lombok.AllArgsConstructor;
    import org.springframework.stereotype.Service;

    import java.util.List;

    @AllArgsConstructor
    @Service
    public class CinemaService {
        SeatRepository seatRepository;
        SoldTicketRepository ticketRepository;
        CinemaProps props;
        Mapper mapper;

        public List<PricedSeat> getAvailableSeats(){
            return seatRepository.getAvailableSeats()
                    .stream()
                    .map(seat -> addPrice(seat))
                    .toList();
        }

        private int calcPrice(Seat seat){
            return seat.row() <= props.numberOfFirstRows()
                    ? props.priceForBottomRows()
                    : props.priceForTopRows();
        }

        private PricedSeat addPrice(Seat seat){
            return PricedSeat.builder()
                    .price(calcPrice(seat))
                    .row(seat.row())
                    .column(seat.column())
                    .build();
        }

        public SoldTicket purchase(Seat seat) {
            if(illegalCoordinate(seat)){
                throw new OutOfBoundsCoordinatesException();
            }
            if(!seatRepository.contains(seat)){
                throw new AlreadyPurchasedException();
            }
            seatRepository.remove(seat);
            PricedSeat ticket = addPrice(seat);
            return ticketRepository.save(ticket);
        }

        private boolean illegalCoordinate(Seat seat){
            return !(0 < seat.column() && seat.column() <= props.total_columns() &&
                    0 < seat.row() && seat.row() <= props.total_rows());
        }

        public PricedSeat returnTicket(TokenDTO tokenDTO) {
            var pricedSeat = ticketRepository.remove(tokenDTO.token())
                    .orElseThrow(WrongTokenException::new);
            seatRepository.save(mapper.toSeat(pricedSeat));
            return pricedSeat;
        }
    }
  learner_created: true
- name: src/cinema/configuration/InitSeats.java
  visible: true
  text: |
    package cinema.configuration;

    import cinema.model.Seat;
    import cinema.repository.SeatRepository;;
    import lombok.AllArgsConstructor;
    import org.springframework.boot.ApplicationArguments;
    import org.springframework.boot.ApplicationRunner;
    import org.springframework.stereotype.Component;

    @Component
    @AllArgsConstructor
    public class InitSeats implements ApplicationRunner {
        SeatRepository repository;
        CinemaProps props;

        @Override
        public void run(ApplicationArguments args){
            for (int i = 1; i <= props.total_rows(); i++) {
                for (int j = 1; j <= props.total_columns(); j++) {
                    repository.save(new Seat(i, j));
                }
            }
        }
    }
  learner_created: true
- name: src/cinema/controller/advice/ErrorControllerAdvice.java
  visible: true
  text: |-
    package cinema.controller.advice;

    import cinema.exception.AlreadyPurchasedException;
    import cinema.exception.OutOfBoundsCoordinatesException;
    import cinema.exception.WrongTokenException;
    import org.springframework.http.HttpStatus;
    import org.springframework.http.ResponseEntity;
    import org.springframework.web.bind.annotation.ExceptionHandler;
    import org.springframework.web.bind.annotation.ResponseStatus;
    import org.springframework.web.bind.annotation.RestControllerAdvice;

    @RestControllerAdvice
    public class ErrorControllerAdvice {
        @ExceptionHandler({
                AlreadyPurchasedException.class,
                OutOfBoundsCoordinatesException.class,
                WrongTokenException.class
        })


        ResponseEntity<ErrorDTO> handleException(Exception ex){
            return ResponseEntity.badRequest().body(new ErrorDTO(ex.getMessage()));
        }

        record ErrorDTO(String error){}

    }
  learner_created: true
- name: src/cinema/exception/WrongPasswordException.java
  visible: true
  learner_created: true
- name: src/cinema/model/response/CinemaStatistics.java
  visible: true
  learner_created: true
- name: src/cinema/repository/SeatDBRepository.java
  visible: true
  learner_created: true
- name: src/cinema/model/entity/SoldTicketEntity.java
  visible: true
  learner_created: true
- name: src/cinema/repository/SoldTicketEntityRepository.java
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/13378#comment
status: Solved
feedback:
  message: Well done! You've finished the project. Select a new project on <a href="https://hyperskill.org/projects">Hyperskill</a>
    to continue learning.
  time: "Wed, 03 May 2023 19:36:31 UTC"
record: -1
